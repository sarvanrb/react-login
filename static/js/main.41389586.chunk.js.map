{"version":3,"sources":["Components/SignUp.js","Components/Login.js","App.js","serviceWorker.js","index.js"],"names":["initialState","email","emailError","password","passwordError","password2","password2Error","emailErrorTextColor","emailInputBorder","pwd1TextColor","pwd1InputBorder","pwd2TextColor","pwd2InputBorder","SignUp","useState","account","setAccount","inputRef","useRef","useEffect","current","focus","className","onSubmit","e","preventDefault","length","console","log","ref","type","placeholder","onChange","target","value","onFocus","onBlur","validEmail","test","pwd","id","pwd2","to","Login","draggable","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.41389586.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { HashLink as Link } from \"react-router-hash-link\";\r\n\r\nconst initialState = {\r\n    email: \"\",\r\n    emailError: \"\", // Error if not a valid email\r\n    password: \"\",\r\n    passwordError: \"\", // Error if password length less than 8 characters\r\n    password2: \"\",\r\n    password2Error: \"\", // Error when password doesn't match\r\n    //state variables for UI elements\r\n    emailErrorTextColor: \"form-text text-muted\", // Text color of email error message\r\n    emailInputBorder: \"form-control\", // Border color of email input\r\n    pwd1TextColor: \"form-text text-muted\", // Text color of pwd1 error message\r\n    pwd1InputBorder: \"form-control\", // Border color of pwd1 input\r\n    pwd2TextColor: \"form-text text-muted\", // Text color of pwd2 error message\r\n    pwd2InputBorder: \"form-control\" // Border color of pwd2 input\r\n};\r\n\r\nfunction SignUp() {\r\n    const [account, setAccount] = useState(initialState);\r\n\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n    }, []);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if (account.email.length > 0) {\r\n            if (account.password.length >= 8 && account.password2Error === \"\") {\r\n                console.log(\"submitted\");\r\n                console.log(account);\r\n                setAccount(initialState);\r\n            } else {\r\n            }\r\n        } else {\r\n            setAccount({\r\n                ...account,\r\n                emailError: \"Please enter a valid email address\",\r\n                emailInputBorder: \"form-control border-danger\",\r\n                emailErrorTextColor: \"form-text text-left text-danger\"\r\n            });\r\n        }\r\n    };\r\n\r\n    const validateEmail = e => {\r\n        if (account.email.length > 0) {\r\n            let validEmail = false;\r\n            var re = /\\S+@\\S+\\.\\S+/;\r\n            validEmail = re.test(e.target.value);\r\n            if (validEmail) {\r\n                setAccount({\r\n                    ...account,\r\n                    emailError: \"\",\r\n                    emailInputBorder: \"form-control\",\r\n                    emailErrorTextColor: \"form-text text-left-text-muted\"\r\n                });\r\n            } else {\r\n                setAccount({\r\n                    ...account,\r\n                    emailError: \"Please enter a valid email address\",\r\n                    emailInputBorder: \"form-control border-danger\",\r\n                    emailErrorTextColor: \"form-text text-left text-danger\"\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const resetEmailError = () => {\r\n        setAccount({\r\n            ...account,\r\n            emailError: \"\",\r\n            emailInputBorder: \"form-control\",\r\n            emailErrorTextColor: \"form-text text-left-text-muted\"\r\n        });\r\n    };\r\n    const displayPwdLen = e => {\r\n        setAccount({\r\n            ...account,\r\n            passwordError: \"Minimum 8 characters\",\r\n            pwd1TextColor: \"form-text text-left text-muted \",\r\n            pwd1InputBorder: \"form-control\"\r\n        });\r\n    };\r\n\r\n    const checkPwdLen = e => {\r\n        console.log(\"Blr pwd1 Called\");\r\n        let pwd = e.target.value;\r\n        console.log(pwd, pwd.length);\r\n        if (pwd.length === 0 || pwd.length >= 8) {\r\n            setAccount({ ...account, passwordError: \"\" });\r\n        } else {\r\n            setAccount({\r\n                ...account,\r\n                pwd1InputBorder: \"form-control form-text border-danger\",\r\n                pwd1TextColor: \"form-text text-left text-danger \"\r\n            });\r\n        }\r\n    };\r\n\r\n    const checkPwdMatch = e => {\r\n        console.log(\"Blr pwd2 Called\");\r\n        let pwd2 = e.target.value;\r\n        console.log(pwd2);\r\n        if (account.password !== pwd2) {\r\n            setAccount({\r\n                ...account,\r\n                password2Error: \"Passwords didn't match\",\r\n                pwd2TextColor: \"form-text text-left text-danger\",\r\n                pwd2InputBorder: \"form-control form-text border-danger\"\r\n            });\r\n        } else {\r\n            setAccount({\r\n                ...account,\r\n                password2Error: \"\"\r\n            });\r\n        }\r\n    };\r\n\r\n    const resetPwdMatch = () => {\r\n        setAccount({\r\n            ...account,\r\n            password2Error: \"\",\r\n            pwd2InputBorder: \"form-control form-text\"\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"sign-up-outer\">\r\n            <div className=\"container\">\r\n                <div className=\"row mt-5 pt-5\">\r\n                    <div className=\"col-sm-4\"></div>\r\n                    <div className=\"col-sm-4 border border-info rounded p-5 \">\r\n                        <h3 className=\"mb-4\">Welcome to this website!</h3>\r\n                        {/* <hr /> */}\r\n                        <form onSubmit={handleSubmit}>\r\n                            <div className=\"form-group\">\r\n                                <input\r\n                                    ref={inputRef}\r\n                                    type=\"text\"\r\n                                    className={account.emailInputBorder}\r\n                                    placeholder=\"Email\"\r\n                                    onChange={e =>\r\n                                        setAccount({\r\n                                            ...account,\r\n                                            email: e.target.value\r\n                                        })\r\n                                    }\r\n                                    onFocus={resetEmailError}\r\n                                    onBlur={validateEmail}\r\n                                    value={account.email}\r\n                                />\r\n                                <small className={account.emailErrorTextColor}>\r\n                                    {account.emailError}\r\n                                </small>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <input\r\n                                    type=\"password\"\r\n                                    className={account.pwd1InputBorder}\r\n                                    placeholder=\"Password\"\r\n                                    value={account.password}\r\n                                    onChange={e =>\r\n                                        setAccount({\r\n                                            ...account,\r\n                                            password: e.target.value\r\n                                        })\r\n                                    }\r\n                                    onBlur={checkPwdLen}\r\n                                    onFocus={displayPwdLen}\r\n                                />\r\n                                <small\r\n                                    id=\"emailHelp\"\r\n                                    className={account.pwd1TextColor}\r\n                                >\r\n                                    {account.passwordError}\r\n                                </small>\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <input\r\n                                    type=\"password\"\r\n                                    className={account.pwd2InputBorder}\r\n                                    placeholder=\"Retype password\"\r\n                                    value={account.password2}\r\n                                    onChange={e =>\r\n                                        setAccount({\r\n                                            ...account,\r\n                                            password2: e.target.value\r\n                                        })\r\n                                    }\r\n                                    onBlur={checkPwdMatch}\r\n                                    onFocus={resetPwdMatch}\r\n                                />\r\n                                <small className={account.pwd2TextColor}>\r\n                                    {account.password2Error}\r\n                                </small>\r\n                            </div>\r\n                            {/* <div> {account.password2Error\r\n                    } </div> */}\r\n\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"btn btn-info mt-3 px-5\"\r\n                            >\r\n                                Sign up\r\n                            </button>\r\n                            <small\r\n                                id=\"emailHelp\"\r\n                                className=\"form-text text-muted mt-2\"\r\n                            >\r\n                                Already have an account?{\" \"}\r\n                                <Link to=\"login\" className=\"text-info\">\r\n                                    Login\r\n                                </Link>\r\n                            </small>\r\n                        </form>\r\n                    </div>\r\n                    <div className=\"col-sm-4\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SignUp;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport { HashLink as Link } from \"react-router-hash-link\";\r\n\r\nconst initialState = {\r\n    email: \"\",\r\n    password: \"\",\r\n    passwordError: \"\", // Error if password length less than 8 characters\r\n    //state variables for UI elements\r\n    emailErrorTextColor: \"form=-text text-muted\", // Text color of email error message\r\n    emailInputBorder: \"form-control\", // Border color of email input\r\n    pwd1TextColor: \"form-text text-muted\", // Text color of pwd1 error message\r\n    pwd1InputBorder: \"form-control\" // Border color of pwd1 input\r\n};\r\n\r\nfunction Login() {\r\n    const [account, setAccount] = useState(initialState);\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus();\r\n    }, []);\r\n\r\n    const validateEmail = e => {\r\n        let emaill = account.email;\r\n        if (emaill.length > 0) {\r\n            var validEmail = false;\r\n            var re = /\\S+@\\S+\\.\\S+/;\r\n            validEmail = re.test(e.target.value);\r\n            if (validEmail) {\r\n                setAccount({\r\n                    ...account,\r\n                    emailError: \"\",\r\n                    emailInputBorder: \"form-control\",\r\n                    emailErrorTextColor: \"form-text text-left-text-muted\"\r\n                });\r\n            } else {\r\n                setAccount({\r\n                    ...account,\r\n                    emailError: \"Please enter a valid email address\",\r\n                    emailInputBorder: \"form-control border-danger\",\r\n                    emailErrorTextColor: \"form-text text-left text-danger\"\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    const resetEmailError = e => {\r\n        setAccount({\r\n            ...account,\r\n            emailError: \"\",\r\n            emailInputBorder: \"form-control\",\r\n            emailErrorTextColor: \"form-text text-left-text-muted\"\r\n        });\r\n    };\r\n    const checkPwdLen = e => {\r\n        console.log(\"blur pwd called\");\r\n        let pwd = e.target.value;\r\n        if (pwd.length > 0 && pwd.length < 8) {\r\n            setAccount({\r\n                ...account,\r\n                passwordError: \"Incorrect password\",\r\n                pwd1InputBorder: \"form-control form-text border-danger\",\r\n                pwd1TextColor: \"form-text text-left text-danger \"\r\n            });\r\n        } else {\r\n            setAccount({\r\n                ...account,\r\n                passwordError: \"\",\r\n                pwd1TextColor: \"form-text text-left text-muted \",\r\n                pwd1InputBorder: \"form-control\"\r\n            });\r\n        }\r\n    };\r\n    const resetPwdLengthError = e => {\r\n        setAccount({\r\n            ...account,\r\n            passwordError: \"\",\r\n            pwd1TextColor: \"form-text text-left text-muted \",\r\n            pwd1InputBorder: \"form-control\"\r\n        });\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        if (account.email.length > 0) {\r\n            if (account.passwordError === \"\") {\r\n                console.log(account);\r\n                setAccount(initialState);\r\n            }\r\n        } else {\r\n            setAccount({\r\n                ...account,\r\n                emailError: \"Please enter a valid email\",\r\n                emailInputBorder: \"form-control border-danger\",\r\n                emailErrorTextColor: \"form-text text-left text-danger\"\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"login-outer\">\r\n            <div className=\"container\">\r\n                <div className=\"row mt-5 pt-5\">\r\n                    <div className=\"col-sm-4\"></div>\r\n                    <div className=\"col-sm-4 border border-info rounded p-5 \">\r\n                        <h3 className=\"mb-4\">Welcome to this website!</h3>\r\n\r\n                        <form onSubmit={handleSubmit}>\r\n                            <div className=\"form-group\" draggable=\"true\">\r\n                                <input\r\n                                    ref={inputRef}\r\n                                    type=\"text\"\r\n                                    className={account.emailInputBorder}\r\n                                    placeholder=\"Email\"\r\n                                    onChange={e =>\r\n                                        setAccount({\r\n                                            ...account,\r\n                                            email: e.target.value\r\n                                        })\r\n                                    }\r\n                                    onFocus={resetEmailError}\r\n                                    onBlur={validateEmail}\r\n                                    value={account.email}\r\n                                />\r\n                                <small className={account.emailErrorTextColor}>\r\n                                    {account.emailError}\r\n                                </small>\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <input\r\n                                    type=\"password\"\r\n                                    className={account.pwd1InputBorder}\r\n                                    id=\"exampleInputPassword1\"\r\n                                    placeholder=\"Password\"\r\n                                    value={account.password}\r\n                                    onChange={e =>\r\n                                        setAccount({\r\n                                            ...account,\r\n                                            password: e.target.value\r\n                                        })\r\n                                    }\r\n                                    onBlur={checkPwdLen}\r\n                                    onFocus={resetPwdLengthError}\r\n                                />\r\n                                <small\r\n                                    id=\"emailHelp\"\r\n                                    className={account.pwd1TextColor}\r\n                                >\r\n                                    {account.passwordError}\r\n                                </small>\r\n                            </div>\r\n\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"btn btn-info mt-3 px-5\"\r\n                            >\r\n                                Login\r\n                            </button>\r\n                            <small\r\n                                id=\"emailHelp\"\r\n                                className=\"form-text text-muted\"\r\n                            >\r\n                                Already have an account?{\" \"}\r\n                                <Link to=\"signup\" className=\"text-info\">\r\n                                    Sign Up\r\n                                </Link>\r\n                            </small>\r\n                        </form>\r\n                    </div>\r\n\r\n                    <div className=\"col-sm-4\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport SignUp from \"./Components/SignUp\";\nimport Login from \"./Components/Login\";\n\nfunction App() {\n    return (\n        <div className=\"App h-100\">\n            <Router>\n                <Route exact path=\"/\" component={SignUp} />\n                <Route exact path=\"/login\" component={Login} />\n                <Route exact path=\"/signUp\" component={SignUp} />\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}